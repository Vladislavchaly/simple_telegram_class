<?php

/**
 * Class TelegramBot
 */
class TelegramBot
{
    const API_URL = "https://api.telegram.org/bot";
    public $token;
    public $chatId;

    /**
     * TelegramBot constructor.
     * @param $token
     */
    function __construct($token)
    {
        $this->token = $token;
    }

    /**
     * @param $url
     * @return mixed
     */
    public function setWebhook($url)
    {
        return $this->request('setWebhook', ['url' => $url]);
    }

    /**
     * @return mixed
     */
    public function getUpdates()
    {
        return $this->request('getUpdates', []);
    }

    /**
     * @param $message
     * @param array $keyboard
     * @return mixed
     */
    public function sendMessage($message, $keyboard = array())
    {
        return $this->request("sendMessage",
            [
                'chat_id' => $this->chatId,
                'text' => $message,
                'reply_markup' => [
                    'keyboard' =>
                        $keyboard,
                    'one_time_keyboard' => true,
                    'resize_keyboard' => true
                ]
            ]);
    }

    public function sendInline_keyboard($message, $keyboard = array())
    {
        return $this->request("sendMessage",
            [
                'chat_id' => $this->chatId,
                'text' => $message,
                'reply_markup' => [
                    'inline_keyboard' => $keyboard
                    ]
            ]);
    }

    /**
     * @param $url
     * @param string $message
     * @param array $keyboard
     * @return mixed
     */
    public function sendPhoto($url, $message = "", $keyboard = array())
    {
        return $this->request('sendPhoto', [
            'chat_id' => $this->chatId,
            'photo' => $url,
            'caption' => $message,
            'reply_markup' => [
                'keyboard' =>
                    $keyboard,
                'one_time_keyboard' => true,
                'resize_keyboard' => true
            ]
        ]);
    }

    /**
     * @return mixed
     */
    public function getData()
    {
        $data = json_decode(file_get_contents('php://input'));

        if ($data->message->chat->id){
            $this->chatId = $data->message->chat->id;
        }elseif($data->callback_query->from->id){
            $this->chatId = $data->callback_query->from->id;
        }

        return $data;
    }

    /**
     * @param $method
     * @param $posts
     * @return mixed
     */
    public function request($method, $posts)
    {
        // Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
        $ch = curl_init();
        $url = self::API_URL . $this->token . '/' . $method;
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt($ch, CURLOPT_POST, 1);
        curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($posts));

        $headers = array();
        $headers[] = 'Content-Type: application/json';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        $result = curl_exec($ch);
        if (curl_errno($ch)) {
            echo 'Error:' . curl_error($ch);
        }
        curl_close($ch);

        return $result;
    }
}